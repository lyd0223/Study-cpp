#include <iostream>
#include <stack>
#include <queue>
using namespace std;

/*
 vector : 동적 배열로 이루어져있는 선형 자료구조.
		 메모리가 연속적으로 잡혀 무작위(특정) 인덱스 접근이 가능하다.
		 뒤에서 데이터 삽입,삭제가 빠르다. (단, 배열 메모리 여유공간이 없어 확장하지 않는다면.)
		 여분의 메모리가 남는다.(capacity 더크 게 잡는것때문에)
		 맨뒤를 제외한 곳에서 데이터를 삽입삭제하려면 느리다. (뒤에있는 모든 데이터를 옮겨줘야한다.)
		 배열(메모리가 연속)이라 빨라서 캐시적중률이 높기 때문임.
		 캐시메모리 : 

 linkedlist : 데이터와 다른 노드의 포인터를 담는 노드라는 구조체로 이루어진 선형 자료구조.
			  벡터와 비교해 여분 메모리가 없어 낭비되는 메모리가 없다.
			  데이터 위치 무관하게 삽입 및 삭제가 일정한속도를 유지한다.(이터레이터가 현재 그위치를 알고있다는 가정하에,)
			  무작위 접근이안된다.
			  
stack : 후입선출. 
		UI, ctrl+Z 같은거 구현할때.

queue : 선입선출.
*/

int main()
{
	stack<int> s;
	s.emplace(1);
	s.emplace(10);
	s.emplace(1000);
	cout << s.top() << endl;
	queue<int> q;
}